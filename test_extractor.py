#!/usr/bin/env python3
"""
Script de teste para o extrator do Mega Eletr√¥nicos com busca avan√ßada
"""
import os
import sys
import json
import logging
from dotenv import load_dotenv

# Adiciona o diret√≥rio app ao path
sys.path.append(os.path.join(os.path.dirname(__file__), 'app'))

from extractors.mega_eletronicos_extractor import MegaEletronicosExtractor
from extractors.advanced_search import AdvancedProductSearch, SearchFilters

# Configura logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

def load_environment():
    """Carrega vari√°veis de ambiente"""
    # Carrega do .env se existir
    env_file = os.path.join(os.path.dirname(__file__), '.env')
    if os.path.exists(env_file):
        load_dotenv(env_file)
    
    # Define valores padr√£o se n√£o estiverem definidos
    if not os.getenv('OPENROUTER_API_KEY'):
        os.environ['OPENROUTER_API_KEY'] = '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'
    
    if not os.getenv('OPENROUTER_BASE_URL'):
        os.environ['OPENROUTER_BASE_URL'] = 'https://openrouter.ai/api/v1'
    
    if not os.getenv('OPENROUTER_MODEL'):
        os.environ['OPENROUTER_MODEL'] = 'cognitivecomputations/dolphin-mistral-24b-venice-edition:free'
    
    if not os.getenv('SITE_URL'):
        os.environ['SITE_URL'] = 'https://paraguai-price-extractor.com'
    
    if not os.getenv('SITE_NAME'):
        os.environ['SITE_NAME'] = 'Paraguai Price Extractor'

def test_product_extraction():
    """Testa extra√ß√£o de produto espec√≠fico"""
    print("\\n=== TESTE: Extra√ß√£o de Produto Espec√≠fico ===")
    
    extractor = MegaEletronicosExtractor()
    
    # URL do produto Xiaomi POCO C75 fornecida pelo usu√°rio
    product_url = "https://www.megaeletronicos.com/producto/1486179/cel-xiaomi-poco-c75-dual-6-88-6gb-128gb-lte-50mp-13mp-cx-slim-preto-2"
    
    print(f"Extraindo dados de: {product_url}")
    
    try:
        product_data = extractor.extract_product_data(product_url)
        
        if product_data:
            print("\\n‚úÖ Extra√ß√£o bem-sucedida!")
            print(json.dumps(product_data, indent=2, ensure_ascii=False))
        else:
            print("\\n‚ùå Falha na extra√ß√£o")
            
    except Exception as e:
        print(f"\\n‚ùå Erro durante extra√ß√£o: {str(e)}")

def test_advanced_search():
    """Testa busca avan√ßada com filtros"""
    print("\\n=== TESTE: Busca Avan√ßada com Filtros ===")
    
    search_engine = AdvancedProductSearch()
    
    # Teste 1: Busca por faixa de pre√ßo
    print("\\n1. Buscando produtos entre $50 - $200:")
    try:
        filters = SearchFilters(
            min_price_usd=50,
            max_price_usd=200,
            in_stock_only=True,
            sort_by="price_asc"
        )
        
        products = search_engine.search_with_filters("smartphone", filters)
        
        if products:
            print(f"‚úÖ Encontrados {len(products)} smartphones na faixa $50-$200")
            for i, product in enumerate(products[:3], 1):
                print(f"   {i}. {product.get('nome', 'N/A')} - ${product.get('preco_usd', 'N/A')}")
        else:
            print("‚ùå Nenhum produto encontrado nesta faixa")
            
    except Exception as e:
        print(f"‚ùå Erro: {str(e)}")

def test_price_range_search():
    """Testa busca por faixa de pre√ßo espec√≠fica"""
    print("\\n=== TESTE: Busca por Faixa de Pre√ßo ===")
    
    search_engine = AdvancedProductSearch()
    
    price_ranges = [
        (0, 100, "Budget (at√© $100)"),
        (100, 300, "Intermedi√°rio ($100-$300)"),
        (300, 500, "Premium ($300-$500)")
    ]
    
    for min_price, max_price, description in price_ranges:
        print(f"\\nüîç {description}:")
        try:
            products = search_engine.search_by_price_range(min_price, max_price)
            
            if products:
                print(f"   ‚úÖ {len(products)} produtos encontrados")
                # Mostra os 2 primeiros
                for product in products[:2]:
                    print(f"   ‚Ä¢ {product.get('nome', 'N/A')[:50]}... - ${product.get('preco_usd', 'N/A')}")
            else:
                print("   ‚ùå Nenhum produto nesta faixa")
                
        except Exception as e:
            print(f"   ‚ùå Erro: {str(e)}")

def test_best_opportunities():
    """Testa busca por melhores oportunidades"""
    print("\\n=== TESTE: Melhores Oportunidades ===")
    
    search_engine = AdvancedProductSearch()
    
    print("üéØ Buscando melhores oportunidades at√© $300:")
    try:
        opportunities = search_engine.find_best_opportunities(
            query="",  # Busca geral
            max_price_usd=300,
            min_opportunity_score=7.0
        )
        
        if opportunities:
            print(f"\\n‚úÖ Encontradas {len(opportunities)} oportunidades!")
            
            for i, opp in enumerate(opportunities[:5], 1):  # Top 5
                product = opp.product
                print(f"\\n{i}. {product.get('nome', 'N/A')[:60]}...")
                print(f"   üí∞ Pre√ßo: ${product.get('preco_usd', 'N/A')}")
                print(f"   ‚≠ê Score: {opp.opportunity_score:.1f}/14")
                print(f"   üìä Categoria: {opp.price_category}")
                print(f"   üèÜ Avalia√ß√£o: {opp.value_rating}")
                if opp.recommendations:
                    print(f"   üí° Recomenda√ß√£o: {opp.recommendations[0]}")
        else:
            print("‚ùå Nenhuma oportunidade encontrada")
            
    except Exception as e:
        print(f"‚ùå Erro: {str(e)}")

def test_price_suggestions():
    """Testa sugest√µes por faixa de pre√ßo"""
    print("\\n=== TESTE: Sugest√µes por Faixa de Pre√ßo ===")
    
    search_engine = AdvancedProductSearch()
    
    query = "tablet"
    print(f"üîç Sugest√µes para '{query}' em diferentes faixas:")
    
    try:
        suggestions = search_engine.get_price_suggestions(query)
        
        if suggestions:
            for range_name, products in suggestions.items():
                print(f"\\nüì± {range_name.upper()}:")
                if products:
                    for product in products[:2]:  # Top 2 de cada faixa
                        print(f"   ‚Ä¢ {product.get('nome', 'N/A')[:50]}... - ${product.get('preco_usd', 'N/A')}")
                else:
                    print("   Nenhum produto nesta faixa")
        else:
            print("‚ùå Nenhuma sugest√£o encontrada")
            
    except Exception as e:
        print(f"‚ùå Erro: {str(e)}")

def interactive_search():
    """Busca interativa personalizada"""
    print("\\n=== BUSCA INTERATIVA ===")
    print("Digite suas prefer√™ncias:")
    
    try:
        # Coleta prefer√™ncias do usu√°rio
        query = input("üîç Produto desejado (ex: smartphone, tablet, notebook): ").strip()
        if not query:
            query = "smartphone"
        
        max_price = input("üí∞ Pre√ßo m√°ximo em USD (ex: 200): ").strip()
        try:
            max_price = float(max_price) if max_price else 300
        except ValueError:
            max_price = 300
        
        print(f"\\nüöÄ Buscando '{query}' at√© ${max_price}...")
        
        search_engine = AdvancedProductSearch()
        
        # Busca com filtros personalizados
        filters = SearchFilters(
            max_price_usd=max_price,
            in_stock_only=True,
            sort_by="price_asc"
        )
        
        products = search_engine.search_with_filters(query, filters)
        
        if products:
            print(f"\\n‚úÖ Encontrados {len(products)} produtos!")
            print("\\nüèÜ TOP 5 RESULTADOS:")
            
            for i, product in enumerate(products[:5], 1):
                print(f"\\n{i}. {product.get('nome', 'N/A')}")
                print(f"   üí∞ Pre√ßo: ${product.get('preco_usd', 'N/A')} | R${product.get('preco_brl', 'N/A')}")
                print(f"   üè™ Estoque: {product.get('estoque', 'N/A')}")
                print(f"   üîó URL: {product.get('url', 'N/A')}")
        else:
            print("‚ùå Nenhum produto encontrado com esses crit√©rios")
            
    except KeyboardInterrupt:
        print("\\n‚èπÔ∏è Busca cancelada")
    except Exception as e:
        print(f"‚ùå Erro: {str(e)}")

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Sistema de Extra√ß√£o de Pre√ßos - Paraguai")
    print("=" * 60)
    
    # Carrega ambiente
    load_environment()
    
    # Verifica configura√ß√£o
    required_keys = ['OPENROUTER_API_KEY']
    missing_keys = [key for key in required_keys if not os.getenv(key)]
    
    if missing_keys:
        print(f"‚ùå Chaves de API faltando: {', '.join(missing_keys)}")
        return
    
    print("‚úÖ Configura√ß√£o verificada")
    
    # Menu de op√ß√µes
    while True:
        print("\\n" + "=" * 60)
        print("OP√á√ïES DE TESTE:")
        print("1. Extra√ß√£o de produto espec√≠fico")
        print("2. Busca avan√ßada com filtros")
        print("3. Busca por faixa de pre√ßo")
        print("4. Melhores oportunidades")
        print("5. Sugest√µes por faixa de pre√ßo")
        print("6. Busca interativa personalizada")
        print("0. Sair")
        
        try:
            choice = input("\\nEscolha uma op√ß√£o (0-6): ").strip()
            
            if choice == "0":
                break
            elif choice == "1":
                test_product_extraction()
            elif choice == "2":
                test_advanced_search()
            elif choice == "3":
                test_price_range_search()
            elif choice == "4":
                test_best_opportunities()
            elif choice == "5":
                test_price_suggestions()
            elif choice == "6":
                interactive_search()
            else:
                print("‚ùå Op√ß√£o inv√°lida")
                
        except KeyboardInterrupt:
            break
        except Exception as e:
            print(f"‚ùå Erro: {str(e)}")
    
    print("\\nüèÅ Sistema finalizado")

if __name__ == "__main__":
    main()

